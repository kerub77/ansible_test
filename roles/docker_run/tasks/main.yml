---
- name: Unset existing OS_* variables
  ansible.builtin.shell: |
    for key in $( set | awk -F '=' '/^OS_/ {print $1}' ); do
      unset $key
    done
    export OS_PROJECT_DOMAIN_NAME="{{ openstack_project_domain_name }}"
    export OS_USER_DOMAIN_NAME="{{ openstack_user_domain_name }}"
    export OS_PROJECT_NAME="{{ openstack_project_name }}"
    export OS_TENANT_NAME="{{ openstack_tenant_name }}"
    export OS_USERNAME="{{ openstack_username }}"
    export OS_PASSWORD="{{ openstack_password }}"
    export OS_AUTH_URL="{{ openstack_auth_url }}"
    export OS_INTERFACE="{{ openstack_interface }}"
    export OS_ENDPOINT_TYPE="{{ openstack_endpoint_type }}"
    export OS_IDENTITY_API_VERSION="{{ openstack_identity_api_version }}"
    export OS_REGION_NAME="{{ openstack_region_name }}"
    export OS_AUTH_PLUGIN="{{ openstack_auth_plugin }}"
    export OS_PROJECT_ID="{{ openstack_project_id }}"
    export OS_DOMAIN_ID="{{ openstack_domain_id }}"
    export OS_INSECURE="{{ openstack_insecure }}"
  become: true

- name: Filtra le variabili d'ambiente che iniziano con OS_ e salva in un file temporaneo
  shell: |
    env | grep OS_ > /tmp/os_env_vars
  register: env_output
  changed_when: false

- name: Run Docker container with specified options
  community.docker.docker_container:
    name: migratekit-container
    image: "{{ docker_image }}"
    command: "{{ docker_command }}"
    interactive: true
    tty: true
    auto_remove: true
    privileged: "{{ docker_privileged }}"
    networks:
      - name: "{{ docker_network }}"
    volumes: "{{ docker_volumes }}"
    env_file: /tmp/os_env_vars
    env:
        AVAILABILITY_ZONE: "{{ availability_zone }}"
        VMWARE_ENDPOINT: "{{ vmware_endpoint }}"
        VMWARE_USERNAME: "{{ vmware_username }}"
        VMWARE_PASSWORD: "{{ vmware_password }}"
        VMWARE_PATH: "{{ vmware_path }}"
  become: true

